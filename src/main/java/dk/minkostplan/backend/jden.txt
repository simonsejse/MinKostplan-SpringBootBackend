
MySQL --- fetch ---> Hibernate Persistence Context -----> DTOs

 | SELECT r FROM Recipe r JOIN FETCH r.ingredients WHERE r.id = :id
    *  Will join on Ingredient but also the FETCH means they will be put in the HPC (Hibernate Peristence Context)
    *  Without the FETCH they are not added to the context and only r is (so the ingredients are proxies)



While above answers are accurate, I will present the answer in a different way.

Both @OneToMany and @ManyToOne have two parts; left part and right part. For example:

@OneToMany = 'One' is left part and 'Many' is right part
@ManyToOne = 'Many' is left part and 'One' is right part
Simple rule of association using this understanding is, left part represents the class in which you are defining the association.

So, if you define @ManyToOne in OrderLine class referencing to Order class, it means many OrderLine associated to one Order class.


Bidirectional one-to-many and both many-to-one association mappings are fine.
But you should avoid unidirectional one-to-many associations in your domain model.
Otherwise, Hibernate might create unexpected tables and execute more SQL statements than you expected.